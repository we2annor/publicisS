{"ast":null,"code":"import _defineProperty from \"/Users/ernest/Downloads/next-apollo-demo/client/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nvar _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useMemo } from \"react\";\nimport { ApolloClient, HttpLink, InMemoryCache } from \"@apollo/client\";\nvar apolloClient;\n\nvar createApolloClient = function createApolloClient() {\n  return new ApolloClient({\n    ssrMode: false,\n    link: new HttpLink({\n      uri: \"https://faker-graphql.now.sh/graphql\"\n    }),\n    cache: new InMemoryCache()\n  });\n};\n\nexport var initializeApollo = function initializeApollo() {\n  var _apolloClient2;\n\n  var initialState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n  var _apolloClient = (_apolloClient2 = apolloClient) !== null && _apolloClient2 !== void 0 ? _apolloClient2 : createApolloClient();\n\n  if (initialState) {\n    var existingCache = _apolloClient.extract();\n\n    _apolloClient.cache.restore(_objectSpread(_objectSpread({}, existingCache), initialState));\n  }\n\n  if (false) return _apolloClient;\n  if (!apolloClient) apolloClient = _apolloClient;\n  return _apolloClient;\n};\nexport var useApollo = function useApollo(initialState) {\n  _s();\n\n  var store = useMemo(function () {\n    return initializeApollo(initialState);\n  }, [initialState]);\n  return store;\n};\n\n_s(useApollo, \"K8ucUnUnAgJZGJWAL9Ze8IHCmoQ=\");","map":{"version":3,"sources":["/Users/ernest/Downloads/next-apollo-demo/client/lib/apolloClient.js"],"names":["useMemo","ApolloClient","HttpLink","InMemoryCache","apolloClient","createApolloClient","ssrMode","link","uri","cache","initializeApollo","initialState","_apolloClient","existingCache","extract","restore","useApollo","store"],"mappings":";;;;;;;;AAAA,SAASA,OAAT,QAAwB,OAAxB;AACA,SAASC,YAAT,EAAuBC,QAAvB,EAAiCC,aAAjC,QAAsD,gBAAtD;AAEA,IAAIC,YAAJ;;AAEA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,GAAM;AAC/B,SAAO,IAAIJ,YAAJ,CAAiB;AACtBK,IAAAA,OAAO,OADe;AAEtBC,IAAAA,IAAI,EAAE,IAAIL,QAAJ,CAAa;AACjBM,MAAAA,GAAG,EAAE;AADY,KAAb,CAFgB;AAKtBC,IAAAA,KAAK,EAAE,IAAIN,aAAJ;AALe,GAAjB,CAAP;AAOD,CARD;;AAUA,OAAO,IAAMO,gBAAgB,GAAG,SAAnBA,gBAAmB,GAAyB;AAAA;;AAAA,MAAxBC,YAAwB,uEAAT,IAAS;;AACvD,MAAMC,aAAa,qBAAGR,YAAH,2DAAmBC,kBAAkB,EAAxD;;AAEA,MAAIM,YAAJ,EAAkB;AAChB,QAAME,aAAa,GAAGD,aAAa,CAACE,OAAd,EAAtB;;AACAF,IAAAA,aAAa,CAACH,KAAd,CAAoBM,OAApB,iCAAiCF,aAAjC,GAAmDF,YAAnD;AACD;;AAED,aAAmC,OAAOC,aAAP;AAEnC,MAAI,CAACR,YAAL,EAAmBA,YAAY,GAAGQ,aAAf;AAEnB,SAAOA,aAAP;AACD,CAbM;AAeP,OAAO,IAAMI,SAAS,GAAG,SAAZA,SAAY,CAACL,YAAD,EAAkB;AAAA;;AACzC,MAAMM,KAAK,GAAGjB,OAAO,CAAC;AAAA,WAAMU,gBAAgB,CAACC,YAAD,CAAtB;AAAA,GAAD,EAAuC,CAACA,YAAD,CAAvC,CAArB;AACA,SAAOM,KAAP;AACD,CAHM;;GAAMD,S","sourcesContent":["import { useMemo } from \"react\";\nimport { ApolloClient, HttpLink, InMemoryCache } from \"@apollo/client\";\n\nlet apolloClient;\n\nconst createApolloClient = () => {\n  return new ApolloClient({\n    ssrMode: typeof window === \"undefined\",\n    link: new HttpLink({\n      uri: \"https://faker-graphql.now.sh/graphql\",\n    }),\n    cache: new InMemoryCache(),\n  });\n};\n\nexport const initializeApollo = (initialState = null) => {\n  const _apolloClient = apolloClient ?? createApolloClient();\n\n  if (initialState) {\n    const existingCache = _apolloClient.extract();\n    _apolloClient.cache.restore({ ...existingCache, ...initialState });\n  }\n\n  if (typeof window === \"undefined\") return _apolloClient;\n\n  if (!apolloClient) apolloClient = _apolloClient;\n\n  return _apolloClient;\n};\n\nexport const useApollo = (initialState) => {\n  const store = useMemo(() => initializeApollo(initialState), [initialState]);\n  return store;\n};\n"]},"metadata":{},"sourceType":"module"}