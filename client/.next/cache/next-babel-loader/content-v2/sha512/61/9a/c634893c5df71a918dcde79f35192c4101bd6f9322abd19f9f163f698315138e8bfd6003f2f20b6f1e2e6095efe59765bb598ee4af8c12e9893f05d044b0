{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/ernest/Downloads/publicisS/client/pages/NameList/NameList.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from \"react\";\nimport Link from \"next/link\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { gql, InMemoryCache, useQuery } from \"@apollo/client\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1\n  },\n  paper: {\n    padding: theme.spacing(1),\n    textAlign: \"center\",\n    color: theme.palette.text.secondary\n  }\n}));\n\nconst NameList = () => {\n  const {\n    loading,\n    error,\n    data,\n    fetchMore\n  } = useQuery(NAME_LIST_QUERY, {\n    variables: {\n      limit: 20\n    }\n  });\n  console.log(\"data\", data);\n  const classes = useStyles();\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading ...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Error Occured \", error]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.root,\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Person Cards \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), \" \", /*#__PURE__*/_jsxDEV(Link, {\n      href: \"/about\",\n      children: \"About\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 30\n    }, this), data.cards.map((card, index) => /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      direction: \"row\",\n      justify: \"center\",\n      alignItems: \"center\",\n      spacing: 2,\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        md: 6,\n        xs: 4,\n        children: /*#__PURE__*/_jsxDEV(Paper, {\n          className: classes.paper,\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                children: [\"Card \", index + 1]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 49,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 48,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            children: [\"Name: \", card.name]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            children: [\"Email: \", card.email]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            children: [\"Address: \", card.address.streetA, \" \", card.address.streetB, card.address.streetC, \" \", card.address.streetD]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            children: [\"City: \", card.address.city, \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            children: [\"Country: \", card.address.country]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            children: [\"ZipCode: \", card.address.zipcode]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            children: [\"Phone:\", card.phone]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 11\n      }, this)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        //entries = {data.cards || []}\n        fetchMore({\n          variables: {\n            limit: 20,\n            cursor: data.cards.cursor\n          }\n        });\n      },\n      children: \"Load more\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n\nconst cache = new InMemoryCache({\n  typePolicies: {\n    Query: {\n      fields: {\n        cards: {\n          merge(existing, incoming, {\n            readField\n          }) {\n            const newCards = existing ? _objectSpread({}, existing.newCards) : {};\n            incoming.newCards.forEach(newCard => {\n              newCards[readField(\"id\", newCard)] = newCard;\n            });\n            return {\n              cursor: incoming.cursor,\n              newCards\n            };\n          }\n\n        },\n\n        read(existing) {\n          if (existing) {\n            return {\n              cursor: existing.cursor,\n              newCards: Object.values(existing.newCards)\n            };\n          }\n        }\n\n      }\n    }\n  }\n});\nexport default NameList;\nexport const NAME_LIST_QUERY = gql`\n  query Cards($cursor: String, $limit: Int) {\n    cards(cursor: $cursor, limit: $limit) {\n      name\n      email\n      phone\n      address {\n        streetA\n        streetB\n        streetC\n        streetD\n        city\n        country\n        zipcode\n      }\n    }\n  }\n`;","map":{"version":3,"sources":["/Users/ernest/Downloads/publicisS/client/pages/NameList/NameList.js"],"names":["React","Link","Grid","makeStyles","Paper","Typography","gql","InMemoryCache","useQuery","useStyles","theme","root","flexGrow","paper","padding","spacing","textAlign","color","palette","text","secondary","NameList","loading","error","data","fetchMore","NAME_LIST_QUERY","variables","limit","console","log","classes","cards","map","card","index","name","email","address","streetA","streetB","streetC","streetD","city","country","zipcode","phone","cursor","cache","typePolicies","Query","fields","merge","existing","incoming","readField","newCards","forEach","newCard","read","Object","values"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Link from \"next/link\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { gql, InMemoryCache, useQuery } from \"@apollo/client\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  paper: {\n    padding: theme.spacing(1),\n    textAlign: \"center\",\n    color: theme.palette.text.secondary,\n  },\n}));\n\nconst NameList = () => {\n  const { loading, error, data, fetchMore } = useQuery(NAME_LIST_QUERY, {\n    variables: {\n      limit: 20,\n    },\n  });\n\n  console.log(\"data\", data);\n  const classes = useStyles();\n\n  if (loading) return <div>Loading ...</div>;\n  if (error) return <div>Error Occured {error}</div>;\n\n  return (\n    <div className={classes.root}>\n      <h2>Person Cards </h2> <Link href='/about'>About</Link>\n      {data.cards.map((card, index) => (\n        <Grid\n          key={index}\n          container\n          direction='row'\n          justify='center'\n          alignItems='center'\n          spacing={2}\n        >\n          <Grid item md={6} xs={4}>\n            <Paper className={classes.paper}>\n              <Typography>\n                <span>\n                  <strong>Card {index + 1}</strong>\n                </span>\n              </Typography>\n              <Typography>Name: {card.name}</Typography>\n              <Typography>Email: {card.email}</Typography>\n              <Typography>\n                Address: {card.address.streetA} {card.address.streetB}\n                {card.address.streetC} {card.address.streetD}\n              </Typography>\n              <Typography>City: {card.address.city} </Typography>\n              <Typography>Country: {card.address.country}</Typography>\n              <Typography>ZipCode: {card.address.zipcode}</Typography>\n\n              <Typography>Phone:{card.phone}</Typography>\n            </Paper>\n          </Grid>\n        </Grid>\n      ))}\n      <button\n        onClick={() => {\n          //entries = {data.cards || []}\n          fetchMore({ variables: { limit: 20, cursor: data.cards.cursor } });\n        }}\n      >\n        Load more\n      </button>\n    </div>\n  );\n};\n\nconst cache = new InMemoryCache({\n  typePolicies: {\n    Query: {\n      fields: {\n        cards: {\n          merge(existing, incoming, { readField }) {\n            const newCards = existing ? { ...existing.newCards } : {};\n            incoming.newCards.forEach((newCard) => {\n              newCards[readField(\"id\", newCard)] = newCard;\n            });\n            return { cursor: incoming.cursor, newCards };\n          },\n        },\n\n        read(existing) {\n          if (existing) {\n            return {\n              cursor: existing.cursor,\n              newCards: Object.values(existing.newCards),\n            };\n          }\n        },\n      },\n    },\n  },\n});\n\nexport default NameList;\n\nexport const NAME_LIST_QUERY = gql`\n  query Cards($cursor: String, $limit: Int) {\n    cards(cursor: $cursor, limit: $limit) {\n      name\n      email\n      phone\n      address {\n        streetA\n        streetB\n        streetC\n        streetD\n        city\n        country\n        zipcode\n      }\n    }\n  }\n`;\n"]},"metadata":{},"sourceType":"module"}