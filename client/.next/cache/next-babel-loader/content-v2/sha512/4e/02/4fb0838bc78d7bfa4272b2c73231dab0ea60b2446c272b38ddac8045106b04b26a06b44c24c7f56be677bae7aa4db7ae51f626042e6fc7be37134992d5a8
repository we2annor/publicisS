{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useMemo } from \"react\";\nimport { ApolloClient, HttpLink, InMemoryCache } from \"@apollo/client\";\nlet apolloClient;\n\nconst createApolloClient = () => {\n  return new ApolloClient({\n    ssrMode: true,\n    uri: \"http://localhost:4000/\",\n    cache: new InMemoryCache()\n  });\n};\n\nexport const initializeApollo = (initialState = null) => {\n  var _apolloClient2;\n\n  const _apolloClient = (_apolloClient2 = apolloClient) !== null && _apolloClient2 !== void 0 ? _apolloClient2 : createApolloClient();\n\n  if (initialState) {\n    const existingCache = _apolloClient.extract();\n\n    _apolloClient.cache.restore(_objectSpread(_objectSpread({}, existingCache), initialState));\n  }\n\n  if (true) return _apolloClient;\n  if (!apolloClient) apolloClient = _apolloClient;\n  console.log(\"apollo client\", _apolloClient);\n  return _apolloClient;\n};\nexport const useApollo = initialState => {\n  const store = useMemo(() => initializeApollo(initialState), [initialState]);\n  return store;\n};","map":{"version":3,"sources":["/Users/ernest/Downloads/next-apollo-demo/client/lib/apolloClient.js"],"names":["useMemo","ApolloClient","HttpLink","InMemoryCache","apolloClient","createApolloClient","ssrMode","uri","cache","initializeApollo","initialState","_apolloClient","existingCache","extract","restore","console","log","useApollo","store"],"mappings":";;;;;;AAAA,SAASA,OAAT,QAAwB,OAAxB;AACA,SAASC,YAAT,EAAuBC,QAAvB,EAAiCC,aAAjC,QAAsD,gBAAtD;AAEA,IAAIC,YAAJ;;AAEA,MAAMC,kBAAkB,GAAG,MAAM;AAC/B,SAAO,IAAIJ,YAAJ,CAAiB;AACtBK,IAAAA,OAAO,MADe;AAGtBC,IAAAA,GAAG,EAAE,wBAHiB;AAKtBC,IAAAA,KAAK,EAAE,IAAIL,aAAJ;AALe,GAAjB,CAAP;AAOD,CARD;;AAUA,OAAO,MAAMM,gBAAgB,GAAG,CAACC,YAAY,GAAG,IAAhB,KAAyB;AAAA;;AACvD,QAAMC,aAAa,qBAAGP,YAAH,2DAAmBC,kBAAkB,EAAxD;;AAEA,MAAIK,YAAJ,EAAkB;AAChB,UAAME,aAAa,GAAGD,aAAa,CAACE,OAAd,EAAtB;;AACAF,IAAAA,aAAa,CAACH,KAAd,CAAoBM,OAApB,iCAAiCF,aAAjC,GAAmDF,YAAnD;AACD;;AAED,YAAmC,OAAOC,aAAP;AAEnC,MAAI,CAACP,YAAL,EAAmBA,YAAY,GAAGO,aAAf;AAEnBI,EAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BL,aAA7B;AACA,SAAOA,aAAP;AACD,CAdM;AAgBP,OAAO,MAAMM,SAAS,GAAIP,YAAD,IAAkB;AACzC,QAAMQ,KAAK,GAAGlB,OAAO,CAAC,MAAMS,gBAAgB,CAACC,YAAD,CAAvB,EAAuC,CAACA,YAAD,CAAvC,CAArB;AACA,SAAOQ,KAAP;AACD,CAHM","sourcesContent":["import { useMemo } from \"react\";\nimport { ApolloClient, HttpLink, InMemoryCache } from \"@apollo/client\";\n\nlet apolloClient;\n\nconst createApolloClient = () => {\n  return new ApolloClient({\n    ssrMode: typeof window === \"undefined\",\n\n    uri: \"http://localhost:4000/\",\n\n    cache: new InMemoryCache(),\n  });\n};\n\nexport const initializeApollo = (initialState = null) => {\n  const _apolloClient = apolloClient ?? createApolloClient();\n\n  if (initialState) {\n    const existingCache = _apolloClient.extract();\n    _apolloClient.cache.restore({ ...existingCache, ...initialState });\n  }\n\n  if (typeof window === \"undefined\") return _apolloClient;\n\n  if (!apolloClient) apolloClient = _apolloClient;\n\n  console.log(\"apollo client\", _apolloClient);\n  return _apolloClient;\n};\n\nexport const useApollo = (initialState) => {\n  const store = useMemo(() => initializeApollo(initialState), [initialState]);\n  return store;\n};\n"]},"metadata":{},"sourceType":"module"}