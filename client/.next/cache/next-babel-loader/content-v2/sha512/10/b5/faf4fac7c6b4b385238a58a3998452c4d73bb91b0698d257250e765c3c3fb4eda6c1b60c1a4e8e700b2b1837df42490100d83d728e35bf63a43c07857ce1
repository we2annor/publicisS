{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/ernest/Downloads/publicisS/client/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _defineProperty from \"/Users/ernest/Downloads/publicisS/client/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/ernest/Downloads/publicisS/client/pages/NameList/NameList.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query Cards($cursor: String, $limit: Int) {\\n    cards(cursor: $cursor, limit: $limit) {\\n      cursor\\n      name\\n      email\\n      phone\\n      address {\\n        streetA\\n        streetB\\n        streetC\\n        streetD\\n        city\\n        country\\n        zipcode\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from \"react\";\nimport Link from \"next/link\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { gql, InMemoryCache, useQuery } from \"@apollo/client\";\nvar useStyles = makeStyles(function (theme) {\n  return {\n    root: {\n      flexGrow: 1\n    },\n    paper: {\n      padding: theme.spacing(1),\n      textAlign: \"center\",\n      color: theme.palette.text.secondary\n    }\n  };\n});\n\nvar NameList = function NameList() {\n  _s();\n\n  var _useQuery = useQuery(NAME_LIST_QUERY, {\n    variables: {\n      limit: 20\n    }\n  }),\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      data = _useQuery.data,\n      fetchMore = _useQuery.fetchMore;\n\n  console.log(\"data\", data);\n  var classes = useStyles();\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading ...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 23\n  }, _this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Error Occured \", error]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 21\n  }, _this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.root,\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Person Cards \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, _this), \" \", /*#__PURE__*/_jsxDEV(Link, {\n      href: \"/about\",\n      children: \"About\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 30\n    }, _this), data.cards.map(function (card, index) {\n      return /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        direction: \"row\",\n        justify: \"center\",\n        alignItems: \"center\",\n        spacing: 2,\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          md: 6,\n          xs: 4,\n          children: /*#__PURE__*/_jsxDEV(Paper, {\n            className: classes.paper,\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: [\"Card \", index + 1]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 49,\n                  columnNumber: 19\n                }, _this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 48,\n                columnNumber: 17\n              }, _this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 47,\n              columnNumber: 15\n            }, _this), /*#__PURE__*/_jsxDEV(Typography, {\n              children: [\"Name: \", card.name]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 52,\n              columnNumber: 15\n            }, _this), /*#__PURE__*/_jsxDEV(Typography, {\n              children: [\"Email: \", card.email]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 53,\n              columnNumber: 15\n            }, _this), /*#__PURE__*/_jsxDEV(Typography, {\n              children: [\"Address: \", card.address.streetA, \" \", card.address.streetB, card.address.streetC, \" \", card.address.streetD]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 54,\n              columnNumber: 15\n            }, _this), /*#__PURE__*/_jsxDEV(Typography, {\n              children: [\"City: \", card.address.city, \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 15\n            }, _this), /*#__PURE__*/_jsxDEV(Typography, {\n              children: [\"Country: \", card.address.country]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 59,\n              columnNumber: 15\n            }, _this), /*#__PURE__*/_jsxDEV(Typography, {\n              children: [\"ZipCode: \", card.address.zipcode]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 60,\n              columnNumber: 15\n            }, _this), /*#__PURE__*/_jsxDEV(Typography, {\n              children: [\"Phone:\", card.phone]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 15\n            }, _this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 13\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }, _this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, _this);\n    }), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: function onClick() {\n        console.log(\"load more clicked\");\n        fetchMore({\n          variables: {\n            limit: 20,\n            cursor: data.cards.cursor\n          }\n        });\n      },\n      children: \"Load more\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(NameList, \"Onz2X75eJroo4JgGTT6MzIsOTrU=\", false, function () {\n  return [useQuery, useStyles];\n});\n\n_c = NameList;\nvar cache = new InMemoryCache({\n  typePolicies: {\n    Query: {\n      fields: {\n        cards: {\n          merge: function merge(existing, incoming, _ref) {\n            var readField = _ref.readField;\n            var newCards = existing ? _objectSpread({}, existing.cards) : {};\n            incoming.cards.forEach(function (card) {\n              cards[readField(\"id\", card)] = card;\n            });\n            return {\n              cursor: incoming.cursor,\n              cards: cards\n            };\n          }\n        },\n        read: function read(existing) {\n          if (existing) {\n            return {\n              cursor: existing.cursor,\n              cards: Object.values(existing.cards)\n            };\n          }\n        }\n      }\n    }\n  }\n});\nexport default NameList;\nexport var NAME_LIST_QUERY = gql(_templateObject());\n\nvar _c;\n\n$RefreshReg$(_c, \"NameList\");","map":{"version":3,"sources":["/Users/ernest/Downloads/publicisS/client/pages/NameList/NameList.js"],"names":["React","Link","Grid","makeStyles","Paper","Typography","gql","InMemoryCache","useQuery","useStyles","theme","root","flexGrow","paper","padding","spacing","textAlign","color","palette","text","secondary","NameList","NAME_LIST_QUERY","variables","limit","loading","error","data","fetchMore","console","log","classes","cards","map","card","index","name","email","address","streetA","streetB","streetC","streetD","city","country","zipcode","phone","cursor","cache","typePolicies","Query","fields","merge","existing","incoming","readField","newCards","forEach","read","Object","values"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,OAAOC,KAAP,MAAkB,yBAAlB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,SAASC,GAAT,EAAcC,aAAd,EAA6BC,QAA7B,QAA6C,gBAA7C;AAEA,IAAMC,SAAS,GAAGN,UAAU,CAAC,UAACO,KAAD;AAAA,SAAY;AACvCC,IAAAA,IAAI,EAAE;AACJC,MAAAA,QAAQ,EAAE;AADN,KADiC;AAIvCC,IAAAA,KAAK,EAAE;AACLC,MAAAA,OAAO,EAAEJ,KAAK,CAACK,OAAN,CAAc,CAAd,CADJ;AAELC,MAAAA,SAAS,EAAE,QAFN;AAGLC,MAAAA,KAAK,EAAEP,KAAK,CAACQ,OAAN,CAAcC,IAAd,CAAmBC;AAHrB;AAJgC,GAAZ;AAAA,CAAD,CAA5B;;AAWA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,GAAM;AAAA;;AAAA,kBACuBb,QAAQ,CAACc,eAAD,EAAkB;AACpEC,IAAAA,SAAS,EAAE;AACTC,MAAAA,KAAK,EAAE;AADE;AADyD,GAAlB,CAD/B;AAAA,MACbC,OADa,aACbA,OADa;AAAA,MACJC,KADI,aACJA,KADI;AAAA,MACGC,IADH,aACGA,IADH;AAAA,MACSC,SADT,aACSA,SADT;;AAOrBC,EAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBH,IAApB;AACA,MAAMI,OAAO,GAAGtB,SAAS,EAAzB;AAEA,MAAIgB,OAAJ,EAAa,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAP;AACb,MAAIC,KAAJ,EAAW,oBAAO;AAAA,iCAAoBA,KAApB;AAAA;AAAA;AAAA;AAAA;AAAA,WAAP;AAEX,sBACE;AAAK,IAAA,SAAS,EAAEK,OAAO,CAACpB,IAAxB;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADF,oBACyB,QAAC,IAAD;AAAM,MAAA,IAAI,EAAC,QAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADzB,EAEGgB,IAAI,CAACK,KAAL,CAAWC,GAAX,CAAe,UAACC,IAAD,EAAOC,KAAP;AAAA,0BACd,QAAC,IAAD;AAEE,QAAA,SAAS,MAFX;AAGE,QAAA,SAAS,EAAC,KAHZ;AAIE,QAAA,OAAO,EAAC,QAJV;AAKE,QAAA,UAAU,EAAC,QALb;AAME,QAAA,OAAO,EAAE,CANX;AAAA,+BAQE,QAAC,IAAD;AAAM,UAAA,IAAI,MAAV;AAAW,UAAA,EAAE,EAAE,CAAf;AAAkB,UAAA,EAAE,EAAE,CAAtB;AAAA,iCACE,QAAC,KAAD;AAAO,YAAA,SAAS,EAAEJ,OAAO,CAAClB,KAA1B;AAAA,oCACE,QAAC,UAAD;AAAA,qCACE;AAAA,uCACE;AAAA,sCAAcsB,KAAK,GAAG,CAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,qBADF,eAME,QAAC,UAAD;AAAA,mCAAmBD,IAAI,CAACE,IAAxB;AAAA;AAAA;AAAA;AAAA;AAAA,qBANF,eAOE,QAAC,UAAD;AAAA,oCAAoBF,IAAI,CAACG,KAAzB;AAAA;AAAA;AAAA;AAAA;AAAA,qBAPF,eAQE,QAAC,UAAD;AAAA,sCACYH,IAAI,CAACI,OAAL,CAAaC,OADzB,OACmCL,IAAI,CAACI,OAAL,CAAaE,OADhD,EAEGN,IAAI,CAACI,OAAL,CAAaG,OAFhB,OAE0BP,IAAI,CAACI,OAAL,CAAaI,OAFvC;AAAA;AAAA;AAAA;AAAA;AAAA,qBARF,eAYE,QAAC,UAAD;AAAA,mCAAmBR,IAAI,CAACI,OAAL,CAAaK,IAAhC;AAAA;AAAA;AAAA;AAAA;AAAA,qBAZF,eAaE,QAAC,UAAD;AAAA,sCAAsBT,IAAI,CAACI,OAAL,CAAaM,OAAnC;AAAA;AAAA;AAAA;AAAA;AAAA,qBAbF,eAcE,QAAC,UAAD;AAAA,sCAAsBV,IAAI,CAACI,OAAL,CAAaO,OAAnC;AAAA;AAAA;AAAA;AAAA;AAAA,qBAdF,eAgBE,QAAC,UAAD;AAAA,mCAAmBX,IAAI,CAACY,KAAxB;AAAA;AAAA;AAAA;AAAA;AAAA,qBAhBF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AARF,SACOX,KADP;AAAA;AAAA;AAAA;AAAA,eADc;AAAA,KAAf,CAFH,eAiCE;AACE,MAAA,OAAO,EAAE,mBAAM;AACbN,QAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACAF,QAAAA,SAAS,CAAC;AAAEL,UAAAA,SAAS,EAAE;AAAEC,YAAAA,KAAK,EAAE,EAAT;AAAauB,YAAAA,MAAM,EAAEpB,IAAI,CAACK,KAAL,CAAWe;AAAhC;AAAb,SAAD,CAAT;AACD,OAJH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAjCF;AAAA;AAAA;AAAA;AAAA;AAAA,WADF;AA4CD,CAzDD;;GAAM1B,Q;UACwCb,Q,EAO5BC,S;;;KARZY,Q;AA2DN,IAAM2B,KAAK,GAAG,IAAIzC,aAAJ,CAAkB;AAC9B0C,EAAAA,YAAY,EAAE;AACZC,IAAAA,KAAK,EAAE;AACLC,MAAAA,MAAM,EAAE;AACNnB,QAAAA,KAAK,EAAE;AACLoB,UAAAA,KADK,iBACCC,QADD,EACWC,QADX,QACoC;AAAA,gBAAbC,SAAa,QAAbA,SAAa;AACvC,gBAAMC,QAAQ,GAAGH,QAAQ,qBAAQA,QAAQ,CAACrB,KAAjB,IAA2B,EAApD;AACAsB,YAAAA,QAAQ,CAACtB,KAAT,CAAeyB,OAAf,CAAuB,UAACvB,IAAD,EAAU;AAC/BF,cAAAA,KAAK,CAACuB,SAAS,CAAC,IAAD,EAAOrB,IAAP,CAAV,CAAL,GAA+BA,IAA/B;AACD,aAFD;AAGA,mBAAO;AAAEa,cAAAA,MAAM,EAAEO,QAAQ,CAACP,MAAnB;AAA2Bf,cAAAA,KAAK,EAALA;AAA3B,aAAP;AACD;AAPI,SADD;AAWN0B,QAAAA,IAXM,gBAWDL,QAXC,EAWS;AACb,cAAIA,QAAJ,EAAc;AACZ,mBAAO;AACLN,cAAAA,MAAM,EAAEM,QAAQ,CAACN,MADZ;AAELf,cAAAA,KAAK,EAAE2B,MAAM,CAACC,MAAP,CAAcP,QAAQ,CAACrB,KAAvB;AAFF,aAAP;AAID;AACF;AAlBK;AADH;AADK;AADgB,CAAlB,CAAd;AA2BA,eAAeX,QAAf;AAEA,OAAO,IAAMC,eAAe,GAAGhB,GAAH,mBAArB","sourcesContent":["import React from \"react\";\nimport Link from \"next/link\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { gql, InMemoryCache, useQuery } from \"@apollo/client\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  paper: {\n    padding: theme.spacing(1),\n    textAlign: \"center\",\n    color: theme.palette.text.secondary,\n  },\n}));\n\nconst NameList = () => {\n  const { loading, error, data, fetchMore } = useQuery(NAME_LIST_QUERY, {\n    variables: {\n      limit: 20,\n    },\n  });\n\n  console.log(\"data\", data);\n  const classes = useStyles();\n\n  if (loading) return <div>Loading ...</div>;\n  if (error) return <div>Error Occured {error}</div>;\n\n  return (\n    <div className={classes.root}>\n      <h2>Person Cards </h2> <Link href='/about'>About</Link>\n      {data.cards.map((card, index) => (\n        <Grid\n          key={index}\n          container\n          direction='row'\n          justify='center'\n          alignItems='center'\n          spacing={2}\n        >\n          <Grid item md={6} xs={4}>\n            <Paper className={classes.paper}>\n              <Typography>\n                <span>\n                  <strong>Card {index + 1}</strong>\n                </span>\n              </Typography>\n              <Typography>Name: {card.name}</Typography>\n              <Typography>Email: {card.email}</Typography>\n              <Typography>\n                Address: {card.address.streetA} {card.address.streetB}\n                {card.address.streetC} {card.address.streetD}\n              </Typography>\n              <Typography>City: {card.address.city} </Typography>\n              <Typography>Country: {card.address.country}</Typography>\n              <Typography>ZipCode: {card.address.zipcode}</Typography>\n\n              <Typography>Phone:{card.phone}</Typography>\n            </Paper>\n          </Grid>\n        </Grid>\n      ))}\n      <button\n        onClick={() => {\n          console.log(\"load more clicked\");\n          fetchMore({ variables: { limit: 20, cursor: data.cards.cursor } });\n        }}\n      >\n        Load more\n      </button>\n    </div>\n  );\n};\n\nconst cache = new InMemoryCache({\n  typePolicies: {\n    Query: {\n      fields: {\n        cards: {\n          merge(existing, incoming, { readField }) {\n            const newCards = existing ? { ...existing.cards } : {};\n            incoming.cards.forEach((card) => {\n              cards[readField(\"id\", card)] = card;\n            });\n            return { cursor: incoming.cursor, cards };\n          },\n        },\n\n        read(existing) {\n          if (existing) {\n            return {\n              cursor: existing.cursor,\n              cards: Object.values(existing.cards),\n            };\n          }\n        },\n      },\n    },\n  },\n});\n\nexport default NameList;\n\nexport const NAME_LIST_QUERY = gql`\n  query Cards($cursor: String, $limit: Int) {\n    cards(cursor: $cursor, limit: $limit) {\n      cursor\n      name\n      email\n      phone\n      address {\n        streetA\n        streetB\n        streetC\n        streetD\n        city\n        country\n        zipcode\n      }\n    }\n  }\n`;\n"]},"metadata":{},"sourceType":"module"}